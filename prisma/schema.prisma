// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  username     String         @unique
  password     String
  accountType  ACCOUNT_TYPE
  verified     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  token        Token[]
  bond         Bond[]
  purchsedBond PurchsedBond[]
  profile      Profile?

  @@map("user")
}

model Profile {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  city        String
  state       String
  zipCode     String
  addressOne  String
  addressTwo  String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique // relation scalar field (used in the `@relation` attribute above)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profile")
}

model Bond {
  id                                 Int            @id @default(autoincrement())
  image                              String
  name                               String
  organizationName                   String
  organizationEmail                  String
  phoneNumber                        String
  websiteUrl                         String
  companyRegistrationNumber          String
  organizationIncorporated           Boolean
  organizationLegalEstablishmentDate String
  organizationRevenue                String
  amountToRaise                      Int
  reasonForRaisingMoney              String
  organizationHasLegalDocs           Boolean
  launchDate                         String
  serviceProvider                    String
  amountToBeRaised                   String
  duration                           Int
  projectIrr                         Float
  maxOutcomePay                      Int
  transactionFee                     Int
  totalPlatformCost                  Int
  policyArea                         String
  targetPopulation                   Int
  independentEvaluator               String
  overallObjectives                  String
  outcomeMetrics                     String
  outcomeTarget                      String
  description                        String
  facebookLink                       String
  linkedinLink                       String
  twitterLink                        String
  instagramLink                      String
  websiteLink                        String
  other                              String
  category                           BOND_CATEGORY
  user                               User?          @relation(fields: [userId], references: [id])
  userId                             Int?
  createdAt                          DateTime       @default(now())
  updatedAt                          DateTime       @updatedAt
  purchsedBond                       PurchsedBond[]

  @@map("bond")
}

model PurchsedBond {
  id          Int          @id @default(autoincrement())
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  bond        Bond?        @relation(fields: [bondId], references: [id])
  bondId      Int?
  amount      Int
  paymentType PAYMENT_TYPE
  tx_ref      String
  paid        Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("purchased_bond")
}

model Token {
  id        Int      @id @default(autoincrement())
  subject   String
  expires   String
  validity  Boolean
  email     String
  code      String   @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("token")
}

enum ACCOUNT_TYPE {
  INDIVIDUAL
  ORGANIZATION
}

enum BOND_CATEGORY {
  FIAT
  TOKENIZED
  BOTH
}

enum PAYMENT_TYPE {
  CARD
  WALLET
  CRYPTO
}
